// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TRAJECTORY_FLATBUFFER_H_
#define FLATBUFFERS_GENERATED_TRAJECTORY_FLATBUFFER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "pose_generated.h"

namespace flatbuffer {

struct Trajectory;
struct TrajectoryBuilder;
struct TrajectoryT;

struct TrajectoryT : public ::flatbuffers::NativeTable {
  typedef Trajectory TableType;
  std::vector<flatbuffer::Pose> poses{};
};

struct Trajectory FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TrajectoryT NativeTableType;
  typedef TrajectoryBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSES = 4
  };
  const ::flatbuffers::Vector<const flatbuffer::Pose *> *poses() const {
    return GetPointer<const ::flatbuffers::Vector<const flatbuffer::Pose *> *>(VT_POSES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSES) &&
           verifier.VerifyVector(poses()) &&
           verifier.EndTable();
  }
  TrajectoryT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TrajectoryT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Trajectory> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const TrajectoryT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TrajectoryBuilder {
  typedef Trajectory Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_poses(::flatbuffers::Offset<::flatbuffers::Vector<const flatbuffer::Pose *>> poses) {
    fbb_.AddOffset(Trajectory::VT_POSES, poses);
  }
  explicit TrajectoryBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Trajectory> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Trajectory>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Trajectory> CreateTrajectory(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<const flatbuffer::Pose *>> poses = 0) {
  TrajectoryBuilder builder_(_fbb);
  builder_.add_poses(poses);
  return builder_.Finish();
}

struct Trajectory::Traits {
  using type = Trajectory;
  static auto constexpr Create = CreateTrajectory;
};

inline ::flatbuffers::Offset<Trajectory> CreateTrajectoryDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffer::Pose> *poses = nullptr) {
  auto poses__ = poses ? _fbb.CreateVectorOfStructs<flatbuffer::Pose>(*poses) : 0;
  return flatbuffer::CreateTrajectory(
      _fbb,
      poses__);
}

::flatbuffers::Offset<Trajectory> CreateTrajectory(::flatbuffers::FlatBufferBuilder &_fbb, const TrajectoryT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline TrajectoryT *Trajectory::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::make_unique<TrajectoryT>();
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Trajectory::UnPackTo(TrajectoryT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = poses(); if (_e) { _o->poses.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->poses[_i] = *_e->Get(_i); } } else { _o->poses.resize(0); } }
}

inline ::flatbuffers::Offset<Trajectory> Trajectory::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const TrajectoryT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTrajectory(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Trajectory> CreateTrajectory(::flatbuffers::FlatBufferBuilder &_fbb, const TrajectoryT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const TrajectoryT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _poses = _o->poses.size() ? _fbb.CreateVectorOfStructs(_o->poses) : 0;
  return flatbuffer::CreateTrajectory(
      _fbb,
      _poses);
}

inline const flatbuffer::Trajectory *GetTrajectory(const void *buf) {
  return ::flatbuffers::GetRoot<flatbuffer::Trajectory>(buf);
}

inline const flatbuffer::Trajectory *GetSizePrefixedTrajectory(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<flatbuffer::Trajectory>(buf);
}

inline bool VerifyTrajectoryBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flatbuffer::Trajectory>(nullptr);
}

inline bool VerifySizePrefixedTrajectoryBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flatbuffer::Trajectory>(nullptr);
}

inline void FinishTrajectoryBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatbuffer::Trajectory> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTrajectoryBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatbuffer::Trajectory> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<flatbuffer::TrajectoryT> UnPackTrajectory(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<flatbuffer::TrajectoryT>(GetTrajectory(buf)->UnPack(res));
}

inline std::unique_ptr<flatbuffer::TrajectoryT> UnPackSizePrefixedTrajectory(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<flatbuffer::TrajectoryT>(GetSizePrefixedTrajectory(buf)->UnPack(res));
}

}  // namespace flatbuffer

#endif  // FLATBUFFERS_GENERATED_TRAJECTORY_FLATBUFFER_H_
